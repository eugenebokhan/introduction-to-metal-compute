
// This file is autogenerated, do not edit it
import MetalTools


final internal class Adjustments {

  internal let pipelineState: MTLComputePipelineState

  internal init(library: MTLLibrary) throws {
    let constantValues = MTLFunctionConstantValues()
    let deviceSupportsNonuniformThreadgroups = library.device.supports(feature: .nonUniformThreadgroups)
    constantValues.set(deviceSupportsNonuniformThreadgroups, at: 0)
    self.pipelineState = try library.computePipelineState(function: "adjustments", constants: constantValues)
  }

  internal func callAsFunction(source: MTLTexture, destination: MTLTexture, temperature: Float, tint: Float, in commandBuffer: MTLCommandBuffer) {
    self.encode(source: source, destination: destination, temperature: temperature, tint: tint, in: commandBuffer)
  }
  internal func callAsFunction(source: MTLTexture, destination: MTLTexture, temperature: Float, tint: Float, using encoder: MTLComputeCommandEncoder) {
    self.encode(source: source, destination: destination, temperature: temperature, tint: tint, using: encoder)
  }
  internal func encode(source: MTLTexture, destination: MTLTexture, temperature: Float, tint: Float, in commandBuffer: MTLCommandBuffer) {
    commandBuffer.compute { encoder in
      encoder.label = "Adjustments"
      self.encode(source: source, destination: destination, temperature: temperature, tint: tint, using: encoder)
    }
  }
  internal func encode(source: MTLTexture, destination: MTLTexture, temperature: Float, tint: Float, using encoder: MTLComputeCommandEncoder) {
    let threadgroupSize = self.pipelineState.max2dThreadgroupSize
    encoder.setTexture(source, index: 0)
    encoder.setTexture(destination, index: 1)
    encoder.setValue(temperature, at: 0)
    encoder.setValue(tint, at: 1)

    encoder.dispatch2d(state: self.pipelineState, exactlyOrCovering: destination.size, threadgroupSize: threadgroupSize)
  }

}

